什么是泛型
泛型提供了编译期间的的类型安全检查机制 该机制允许编译期间检查到非法的数据类型数据结构
泛型的本质就是 参数化类型 所操作的数据类型被指定为一个参数
好处: 类型安全 消除了强制数据类型的转换


同一个字节码文件，在一个jvm虚拟机堆内存中，只会生成一个对应的Class类对象



泛型类: 实例化类对象的时候指明泛型的具体类型
从泛型类派生子类: 在创建子类的时候会先调用父类的构造函数
子类也是泛型类，父类的所有泛型参数要和子类中至少一种泛型参数要保证一样
子类不是泛型类，父类必须指定泛型的数据类型



泛型接口:
实现类不是泛型类时 需要明确泛型接口的数据类型
实现类的泛型类的时 需要和接口的泛型类型一致

泛型方法: 是在调用方法的时候指明泛型的具体类型
泛型类中返回泛型参数的不是泛型方法 因为其没有泛型列表
只有声明了泛型列表的方法才是泛型方法
泛型方法独立于泛型类中的泛型标识 即使一样也不赋一样的类型
泛型方法可以使方法独立于类而变化
如果static方法要使用泛型能力，就必须使其成为泛型方法

类型通配符是实参的具体类型 泛型标识用在形参 类型通配符用在实参

类型通配符的上限如 <? extends Number>则里面的数据类型只能传Number类型的或者Number的子类   针对有上限的集合不能填充元素因为不知道哪种类型
类型通配符的下限<? super 实参类型> 要求该泛型的类型只能是 实参类型或者实参类型的父类类型  可以填充

类型擦除: 泛型只存在编译阶段

