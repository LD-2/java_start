JAVA做WEB开发我们称为JavaWEB开发 JavaWEB开发最核心的规范: Servlet [Server Applet服务器端的Java小程序]
服务器 软件 资源
关于系统架构:
C/S   B/S

C/S: Client/Server 客户端/服务器
如qq 永劫无间等都是CS架构模式
CS架构的系统优缺点:
优点: 速度快 画面炫酷 安全 服务器压力小。 缺点: 升级维护麻烦 更新麻烦 一般就要更新很多  因为CS架构的软件 一般大量的数据都存储在客户端 建模之类的直接本地跑 少了一些服务器的传输

B/S: Browser/Server
BS架构的系统优缺点:
实际上BS还是一个CS 只不过这里的C是一个固定不变的软件
优点: 升级维护方便 不用下载客户端 用户操作简单  缺点: 速度慢 体验差 数据不安全

JAVASE java标准版 一套基础java类库
JAVAEE java企业版 一套类库有助于企业开发开发web
JAVAME java微型版

JAVAEE 包含许多规范 13种规范 其中Servlet是其中之一

BS结构的系统通信原理:
  web系统的访问过程:打开浏览器 输入网址 回车 代码传到浏览器 浏览器渲染相应结果
  域名是IP地址的另一种形式  DNS域名服务器
  端口号 一个端口代表一个软件 每个软件启动后都对应一个端口号 同一个计算机中端口号是唯一的
  http://ip:端口号/资源路径
 一个WEB系统的的通信原理:  输入网址URL 统一资源定位符  域名解析器进行域名解析 浏览器在网络中通过ip定位服务器 根据端口号定位相应服务器软件 通过资源名找到需要的资源  服务器相应请求返回数据 浏览器接受代码进行渲染

关于web服务器软件:
Tomcat
jetty
JBOSS(应用服务器)
WebLogic(应用服务器)
WebSphere(应用服务器)
应用服务器实现了JAVAEE的所有规范（13种规范）
Web服务器只实现了JAVAEE中的Servlet+JSP两个核心规范
应用服务器内嵌了Web服务器

因此tomcat是java语言写的 想运行就要有jdk

什么是请求什么是响应
数据流向不同 请求B-S  相应S-B

一个WEB系统的的通信原理:
一台计算机既可以有浏览器软件又可以有Web服务器软件

关于Tomcat服务器软件的目录
bin 此目录是Tomcat服务器的命令文件存放的目录 比如启动Tomcat和关闭Tomcat等命令
conf 此目录是Tomcat服务器的配置文件存放目录  server.xml文件可以配置端口号 默认tomcat端口是8080
lib 这个文件时tomcat的核心程序目录 因为tomcat服务器软件是java语言编写的 这里的jar包都是 class文件
logs tomcat服务器的日志目录 tomcat服务器的启动等信息都会在这个目录下生成日志文件
temp tomcat服务器的临时目录用于存储临时文件
webapp 这个目录用于存放大量的webapp web服务器中的项目
work 这个目录用于存放jsp文件翻译之后的Java文件以及编译之后的class文件


.bat文件批量执行windows的dos命名
.sh文件批量执行shell文件

启动tomcat服务器 需要配置JAVA_HOME  CATALINA_HOME
配置完成后在cmd start.bat开启Tomcat shutdown.bat关闭Tomcat
测试是否开启 搜索栏 http://localhost:8080

web服务器软件上的项目都在webapps这个目录下
初步理解资源的请求和服务器的相应 一个初识web小页面
在代码里面跳转页面 输入/项目名/请求资源目录 这里不用添加http就可以
数据被写死存展示到html中是静态网页 静态资源
连接数据库 写java程序连接数据库配合javaee是展示动态网页 数据动态

一个路径代表一个资源 资源可以是一个静态资源 也可以是动态资源(java小程序)
后端要执行哪一个java小程序 取决于前端浏览器发送的请求路径 一个路劲对应一个Servlet程序
对于一个动态的web而言一个请求响应 要多少个角色参加 角色与角色之间有哪些协议
有哪些角色:
浏览器软件开发人员
WEBServer的开发团队（软件如: Tomcat Jetty WebLogic JBOSS WebSphere）
DB Server的开发团队如（Oracle Mysql...）
Webapp项目开发人员
角色和角色之间遵循的规范:
Webapp开发人员和WebServer的开发团队 之间有一套规范 JavaEE规范之一Servlet规范
    Servlet规范作用是WebServer和webapp之间解耦合 毕竟服务器软件有很多
Browser和WEBServer之间遵循HTTP协议（超文本传输协议）
WEBServer和DBServer之间的规范: jdbc规范

模拟Servlet本质
SUN公司制定Servlet接口规范  javax.servlet.Servlet
充当Tomcat开发 java编写
开发webapp  实现Servlet接口

一个webapp主要就是完成两个任务 配置文件信息和实现servlet的所有类

总结: 面向接口编程 实现servlet接口 配置properties文件
假设实现的是一个java小程序数据变化了
浏览器发送请求(http协议) 根据ip地址端口号资源目录 找到对应的web服务器软件中的某个项目的某个项目
这个时候（tomcat）服务器就会根据传来的目录通过读取properties配置文件根据反射找到对应servlet实现类 从而创建对象实现相对应的方法
如果涉及数据改动就根据jdbc协议响应数据库 改动数据 返回服务器再响应到浏览器渲染出相对应的画面
其中servlet接口 和 jdbc接口 都可以体现了面对接口的编程思想 正是这种思想 实现了 服务器和webapp之间的解耦合 数据库和webapp之间的解耦合

通过模拟servlet本质我们可以知道
配置文件的名字不能乱来是固定的
存放路径是固定的
都是由sun公司的servlet协议规定的
一个合格的webapp应该有怎么样的目录结构
一个合格的webapp应该有怎么样的配置文件
一个合格的webapp配置文件的目录
一个合格的webapp中的java程序放在哪里
这些都是Servlet
正是因为不同服务器软件遵循了这个协议 才会有不同的服务器软件都可以运行同一个webapp 实现了服务器软件和webapp之间的解耦合
