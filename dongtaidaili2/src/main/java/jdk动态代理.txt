jdk动态代理：
    1、反射，Method类，表示方法。类中的方法。通过Method可以执行某个方法。
    2、jdk动态代理的实现
        反射包 java.lang.reflect 里面有三个类：InvocationHandler  Method  Proxy
        1、InvocationHandler接口：就一个方法invoke()
            invoke()表示代理对象要执行的代码，你的代理类要完成的功能要写在invoke()方法中
            代理类完成的功能:
                1、调用目标方法，执行目标方法的功能
                2、功能增强，在执行目标方法调用时，增加功能
            方法原型：public Object invoke(Object proxy, Method method, Object[] args)
            参数：Object proxy：jdk创建的代理对象，无需赋值
                 Method method：目标类中的方法，jdk提供method对象无需赋值
                 Object[] args：目标类中方法的参数，jdk提供
            怎么用：
                1、创建类实现接口InvocationHandler
                2、重写invoke()方法，把原来静态代理中的代理类要完成的功能写在这里面

        2、 Method类: 表示的方法，确切地说就是目标类中的方法。
            作用：通过 method.invoke(目标对象,方法的参数)   也就是利用反射机制执行了这个对象的这一个方法
            Method method = 类名.class.getMethod("setName",String.class);
            Object obj=method.invoke(user,"李四");

        3、Proxy类：核心的对象，创建代理对象。之前创建的对象都是new类的构造方法()
            现在用Proxy类的方法代替new 的使用
            方法：静态方法 newProxyInstance()
            作用：创建代理对象，等同于静态代理中的new TaoBao()
            只不过一个时jdk创建的 直接动态创建对象了 不用手动创建一个代理类了
       参数：
       1. ClassLoader loader类加载器,负责向内存中加载对象的。使用反射获取对象的ClassLoader
         类a, a.getClass().getClassLoader(), 目标对象的类加载器
       2. Class<?>[] interfaces:接口，目标对象实现的接口，也是反射获取的。
       3. InvocationHandler h:我们自己写的,代理类要完成的功能。
        public static Object newProxyInstance(ClassLoader loader,
                                                  Class<?>[] interfaces,
                                                  InvocationHandler h)



实现动态代理的步骤：
    1、创建接口，定义目标类要完成的功能
    2、创建目标类实现接口
    3、创建InvocationHandle接口的实现类，在invoke方法中完成代理类的功能
        1、调用目标方法
        2、增强功能
    4、使用Proxy类的静态方法，创建代理对象并把返回值转为接口类型

动态代理可以肝什么：
可以在不改变原来目标方法功能的前提下，可以在代理中增强自己的功能代码。
程序开发中的意思。
比如：你所在的项目中，有一个功能是其他人（公司的其它部门，其它小组的人)写好的，
你可以使用。GoNong.class, GoNong gn - new GoNong(), gn.print();
你发现这个功能,现在还缺点, 不能完全满足我项目的需要。
我需要在gn.print()执行后,需要自己在增加代码。
用代理实现gn.print ()调用时,增加自己代码,而不用去改原来的GoNong文件。

jdk动态代理,必须有接口,目标类必须实现接口,没有接口时,需要使用cglib动态代理

