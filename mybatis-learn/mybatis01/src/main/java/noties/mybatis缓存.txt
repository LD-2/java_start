Mybatis缓存
cache
缓存的作用通过减少IO的方式来提高程序的执行效率
mybatis的缓存: 将select语句的查询结果放到缓存中，当下一条语句还是select语句时，直接从缓存中取，不再查找数据库。一方面减少了IO，另一方面不在执行繁琐的查询算法
mybatis的缓存有:
    一级缓存: 将 查询到的数据存到SqlSession中
    二级缓存: 将 查询到的数据存到SqlSessionFactory中
    或者继承其它第三方插件的缓存 比如EhCache Java开发的  或者Memcache C语言开发的
缓存只针对DQL语句，也就是缓存机制只对应select语句

一级缓存默认是开启的，不需要做任何配置
原理: 只要使用同一个SqlSession对象执行同一条Sql语句，就会走缓存
模块名: mybatis-010-cache


//    什么情况下 会不走一级缓存
//    SqlSession对象不是同一个
//    查询条件不一样

//    什么时候一级缓存失效
//    第一次DQL和第二次DQL语句之间 手动清除缓存sqlSession.clearCache() 手动清除缓存
//    或者执行了insert update delete 中的任意一条且不分表


//    二级缓存的范围是SqlSessionFactory。
//    使用二级缓存需要具备以下几个条件：
//    1. <setting name="cacheEnabled" value="true">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。默认就是true，无需设置。
//    2,在需要使用二级缓 SqlMapper.xml文件中添加配置: <cache/>
//    3,使用二级缓存的实体类对象必须是可序列化的,也就是必须实现java.io.Serializable接口
//    4. SqlSession对象关闭或提交之后,一级缓存中的数据才会被写入到二级缓存当中。此时二级缓存才可用。测试二级缓存：
//    二级缓存的失效：只要两次查询之间出现了增删改操作。二级缓存就会失效。【一级缓存也会失效】
//    二级缓存的相关配置：
//    1. eviction：指定从缓存中移除某个对象的淘汰算法。
//         默认采用LRU策略。
//         a. LRU: Least Recently Used。最近最少使用。优先淘汰在间隔时间内使用频率最低的对象。(其实还有一种淘汰算法LFU，最不常用。）
//         b. FIFO: First In First Out。一种先进先出的数据缓存器。先进入二级缓存的对象最先被淘汰。
//         c.SOFT：软引用。淘汰软引用指向的对象。具体算法和JVM的垃圾回收算法有关。
//         d.WEAK：弱引用。淘汰弱引用指向的对象。具体算法和JVM的垃圾回收算法有关。
//    2. flushInterval:a.二级缓存的刷新时间间隔。单位毫秒。如果没有设置。就代表不刷新缓存,只要内存足够大,一直会向二级缓存中缓存数据。除非执行了增删改。
//    3. readOnly:
//         a.true：多条相同的sql语句执行之后返回的对象是共享的同一个。性能好。但是多线程并发可能会存在安全问题。
//         b.false：多条相同的sql语句执行之后返回的对象是副本，调用了clone方法。性能一般。但安全。
//    4. size:a.设置二级缓存中最多可存储的java对象数量。默认值1024。


集成EhCache是为了代替mybatis自带的二级缓存。
一级缓存是无法替代的。mybatis对外提供了接口，也可以集成第三方的缓存组件。
比如EhCache、Memcache等。都可以。
EhCache是Java写的。Memcache是C语言写的。
所以mybatis集成EhCache较为常见,
按照以下步骤操作,就可以完成集成:
第一步:引入mybatis整合ehcache的依赖。
第二步：在类的根路径下新建echcache.xml文件，并提供以下配置信息
第三步：修改SqlMapper.xml文件中的<cache/>标签，添加type属性。

