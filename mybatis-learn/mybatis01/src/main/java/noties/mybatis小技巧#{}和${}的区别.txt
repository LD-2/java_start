    1、 #{} 和 ${}的区别
        #{}
        12:58:03.946 [main] DEBUG com.mirror.car.mapper.CarMapper.selectByCarType - ==>  Preparing: select id, car_num as carNum, brand, guide_price as guidePrice, produce_time as produceTime, car_type as carType from t_car where car_type = ?
        12:58:03.975 [main] DEBUG com.mirror.car.mapper.CarMapper.selectByCarType - ==> Parameters: pao(String)
        12:58:04.008 [main] DEBUG com.mirror.car.mapper.CarMapper.selectByCarType - <==      Total: 2

        ${}  这里直接拼上去了，错误的原因没有带""，误以为称为字段了  这里可以改成 '${pao}'
        13:07:25.356 [main] DEBUG com.mirror.car.mapper.CarMapper.selectByCarType - ==>  Preparing: select id, car_num as carNum, brand, guide_price as guidePrice, produce_time as produceTime, car_type as carType from t_car where car_type = pao   这里直接拼上去了，错误的原因没有带""，误以为称为字段了
        13:07:25.383 [main] DEBUG com.mirror.car.mapper.CarMapper.selectByCarType - ==> Parameters:
        与目标 VM 断开连接, 地址为: ''127.0.0.1:57485'，传输: '套接字''

        org.apache.ibatis.exceptions.PersistenceException:
        ### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'pao' in 'where clause'
        ### The error may exist in CarMapper.xml
        ### The error may involve defaultParameterMap
        ### The error occurred while setting parameters
        ### SQL: select             id,             car_num as carNum,             brand,             guide_price as guidePrice,             produce_time as produceTime,             car_type as carType         from             t_car         where             car_type = pao
        ### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'pao' in 'where clause'

    #{}和$的区别：
    #{}:底层使用PreparedStatement。特点:先进行SQL语句的编译,然后给SQL语句的占位符问号?传值。可以避免SQL注入的风险。
    ${}:底层使用Statement。特点:先进行SQL语句的拼接,然后再对SQL语句进行编译。存在SQL注入的风险。
    优先使用#{}，这是原则。避免SQL注入的风险。

    2、 asc 升序 | desc 降序
        #{}的执行结果
        Preparing: select id, car_num as carNum, brand, guide_price as guidePrice, produce_time as produceTime, car_type as carType from t_car
        order by produce_time ?
        Parameters: asc(String)
        select id, car_num as carNum, brand, guide_price as guidePrice, produce_time as produceTime, car_type as carType from t_car
        order by produce_time 'asc'

        ${}的执行结果
        Preparing:select id, car_num as carNum, brand, guide_price as guidePrice, produce_time as produceTime, car_type as carType from t_car
        order by produce_time asc
        Parameters:

1、如果需要SQL语句的关键字放到SQL语句中,只能使用${},因为#{}是以值的形式放到SQL语句
2. 向SQL语句当中拼接表名，就需要使用${}现实业务当中，可能会存在分表存储数据的情况。
   因为一张表存的话，数据量太大。查询效率比较低。
   可以将这些数据有规律的分表存储，这样在查询的时候效率就比较高。因为扫描的数据量变少了。
   日志表:专门存储日志信息的。
   如果t_log只有一张表，这张表中每一天都会产生很多log，慢慢的，这个表中数据会很多。
   怎么解决问题？
   可以每天生成一个新表。每张表以当天日期作为名称，
   例如：t_log_20220901t_log_20220902
   你想知道某一天的日志信息怎么办？
   假设今天是20220901，那么直接查：t_log_20220901的表即可。
        <select id="selectAll" resultType="com.mirror.car.pojo.Log">
            select
                id,
                log,
                time
            from
                t_log_${num}
        </select>
3.批量删除：一次删除多条记录。
  批量删除的SQL语句有两种写法：
    第一种or: delete from t_car where id=1 or id=2 or id=3;
    第二种int: delete from t_car where id in(1,2,3);
    应该采用${}的方式:delete from t_car where id in($fids});

4.模糊查询：
    like需求：根据汽车品牌进行模糊查询
    select * from t_car where brand like '%奔驰%';
    select * from t_car where brand like '%比亚迪%';

    第一种方案：
    '%${brand}%'
    第二种方案：concat函数，这个是mysql数据库当中的一个函数，专门进行字符串拼接
    concat('%',#{brand}, '%')
    第三种方案：比较鸡肋了。可以不算。
    concat ('%', '${brand} ', '%' )
    第四种方案：
    "%"#{brand}"%"
