依赖倒置原则(Dependence Inversion Principle)，简称DIP
主要倡导面向抽象编程，面向接口编程，不要面向具体编程
让上层不再依赖下层，下面改动了，上面的代码不会受到牵连。
这样可以大大降低程序的耦合度，耦合度低了，扩展力就强了，同时代码复用性也会增强。（软件七大开发原则都是在为解耦合服务）

你可能会说，上面的代码已经面向接口编程了呀：
确实已经面向接口编程了，但对象的创建是：new UserDaoImplForOracle()显然并没有完全面向接口编程，
还是使用到了具体的接口实现类。什么叫做完全面向接口编程？什么叫做完全符合依赖倒置原则呢？请看以下代码：
private UserDao userDao;


如果代码是这样编写的，才算是完全面向接口编程，才符合依赖倒置原则。那你可能会问，这样userDao是null，在执行的时候就会出现空指针异常呀。
你说的有道理，确实是这样的，所以我们要解决这个问题。解决空指针异常的问题，其实就是解决两个核心的问题：
● 第一个问题：谁来负责对象的创建。【也就是说谁来：new UserDaoImplForOracle()/new UserDaoImplForMySQL()】
● 第二个问题：谁来负责把创建的对象赋到这个属性上。【也就是说谁来把上面创建的对象赋给userDao属性】

如果我们把以上两个核心问题解决了，就可以做到既符合OCP开闭原则，又符合依赖倒置原则。
很荣幸的通知你：Spring框架可以做到。
在Spring框架中，它可以帮助我们new对象，并且它还可以将new出来的对象赋到属性上。
换句话说，

Spring框架可以帮助我们创建对象
并且可以帮助我们维护对象和对象之间的关系。

Spring可以new出来UserDaoImplForMySQL对象，也可以new出来UserDaoImplForOracle对象，
并且还可以让new出来的dao对象和service对象产生关系（产生关系其实本质上就是给属性赋值）。
很显然，这种方式是将对象的创建权/管理权交出去了，不再使用硬编码的方式了。
同时也把对象关系的管理权交出去了，也不再使用硬编码的方式了。
像这种把对象的创建权交出去，把对象关系的管理权交出去，被称为控制反转。

